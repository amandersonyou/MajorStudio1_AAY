/*
 * Note that this function uses *synchronous* JavaScript
 * There is a 2-second (2000 milliseconds) timer after which the JSON will be downloaded
 * so if the API calls are not finished by then, the JSON will only have the ones that did finish.
 * You can increase the timer if you need to.
 */

// load a default library that lets us read/write to the file system
var fs = require('fs')
// load a default library that lets us make HTTP requests (like calls to an API)
var request = require('request')

// endpoint URL
const url = 'https://collectionapi.metmuseum.org/public/collection/v1/objects'

// object Ids I want to download
const myObjectIds = [
//   435573,
// 435590,
// 435655,
// 435684,
// 435707,
// 435737,
// 435750,
// 435751,
// 435756,
// 435770,
// 435809,
// 435857,
// 435874,
// 435877,
// 435878,
// 435879,
// 435885,
// 435905,
// 435906,
// 435907,
// 435909,
// 435923,
// 435962,
// 435964,
// 435965,
// 435966,
// 435968,
// 435972,
// 435985,
// 435986,
// 436010,
// 436013,
// 436025,
// 436057,
// 436060,
// 436061,
// 436064,
// 436081,
// 436083,
// 436085,
// 436086,
// 436090,
// 436192,
// 436205,
// 436229,
// 436241,
// 436248,
// 436324,
// 436410,
// 436441,
// 436451,
// 436455,
// 436535,
// 436555,
// 436558,
// 436593,
// 436594,
// 436595,
// 436632,
// 436652,
// 436653,
// 436817,
// 436826,
// 436827,
// 436830,
// 436831,
// 436832,
// 436833,
// 436849,
// 436863
// 436940,
// 436952,
// 436971,
// 437010,
// 437039,
// 437040,
// 437042,
// 437074,
// 437079,
// 437080,
// 437084,
// 437093,
// 437094,
// 437097,
// 437102,
// 437107,
// 437109,
// 437110,
// 437111,
// 437117,
// 437126,
// 437179,
// 437190,
// 437191,
// 437198,
// 437211,
// 437235,
// 437256,
// 437269,
// 437299,
// 437300,
// 437307,
// 437316,
// 437323,
// 437326,
// 437347,
// 437426,
// 437431,
// 437433,
// 437436,
// 437461,
// 437506,
// 437514,
// 437515,
// 437516,
// 437517,
// 437518,
// 437519,
// 437520,
// 437545,
// 437547,
// 437548,
// 437549,
// 437586,
// 437647,
// 437657,
// 437671,
// 437681,
// 437683,
// 437685,
// 437697,
// 437705,
// 437760,
// 437764,
// 437776,
// 437781,
// 437821,
// 437848,
// 437923,
// 437941,
// 437968,
// 437975,
// 437980,
// 437998,
// 438004,
// 438449,
// 438465,
// 438510,
// 438618,
// 438622,
// 438623,
// 438628,
// 438638,
// 438640,
// 438641,
// 438645,
438646,
438648,
438663,
438664,
438678,
438738,
438813,
438820,
438821,
438849,
439344,
439346,
439351,
439352,
439353,
439358,
439360,
439361,
439365,
439367,
439368,
439369,
439370,
439374,
439375,
439376,
439379,
439380,
439382,
439383,
439385,
439388,
439390,
439399,
439404,
439406,
439407,
439408,
439413,
439762,
439763,
439764,
439766,
439769,
439844,
440326,
440328,
440329,
440332,
440333,
440335,
440336,
440337,
440338,
440339,
440341,
440344,
440351,
440352,
440354,
440355,
440358,
440362,
440364,
440365,
440366,
440367,
440377,
440378,
440380,
440386,
440460,
440727,
441755,
441967,
483334,
695526,
695528,
695534,
695536,
736275
];


// set up empty Array for us to save results to
const myArray = [];

function fetchUrl(objectId){
    request(url + '/' + objectId, function (error, response, body) {
      console.error('error:', error); // Print the error if one occurred
      console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received

      let obj = JSON.parse(body);

      console.log(obj.primaryImage);
      let index = myArray.length;
      myArray[index] = {};
      myArray[index]["objectID"] = obj.objectID;
      myArray[index]["title"] = obj.title;
      myArray[index]["date"] = obj.objectBeginDate;
      myArray[index]["primaryImage"] = obj.primaryImage;
      myArray[index]["filename"] = obj.primaryImage.split('/').pop();
    });
}

// call the function for each element in the myObjectIds array
myObjectIds.forEach(objectId => {
    fetchUrl(objectId)
})

// the function inside the setTimeout saves myResults to a JSON
// it will automatically run after 2000 ms
setTimeout(() => {
    fs.writeFileSync('./EUROdata.json', JSON.stringify(myArray), 'utf8')
}, 2000)
